Try to develop plan and describe the implementation and wait for my feedback before executing any changes.
Do not make documentation files unless specifically requested.
Simplify control flows for readability and easier understanding. Return early. Use guard clauses. Consider replacing conditionals with polymorphism (strategy pattern), and decompose large functions.
Use functions instead of classes (functional programming instead of OOP) unless it is incredibly awkward not to.
Do not create top level scripts to test or create examples, for quick tests run inline python code in the terminal.
Do not leave evaluation scripts or messy top level scripts lying around.
If a test is worth writing it's worth putting it in the test directory.
Use a high bar for creating new entrypoints and startup scripts, lean on existing ones.
Make sure everything has type hints and prefer strong types over generic types (e.g. Pydantic models over Dict[str, Any])
Use the least amount of abstractions necessary to get the job done.
Do not add more complexity or functionality than necessary.